# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lidar_slam/HitlSlamInputMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class HitlSlamInputMsg(genpy.Message):
  _md5sum = "b620f65f34689a92cdfd5da0edee5151"
  _type = "lidar_slam/HitlSlamInputMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point32 line_a_start
geometry_msgs/Point32 line_a_end
geometry_msgs/Point32 line_b_start
geometry_msgs/Point32 line_b_end
================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z"""
  __slots__ = ['line_a_start','line_a_end','line_b_start','line_b_end']
  _slot_types = ['geometry_msgs/Point32','geometry_msgs/Point32','geometry_msgs/Point32','geometry_msgs/Point32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       line_a_start,line_a_end,line_b_start,line_b_end

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HitlSlamInputMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.line_a_start is None:
        self.line_a_start = geometry_msgs.msg.Point32()
      if self.line_a_end is None:
        self.line_a_end = geometry_msgs.msg.Point32()
      if self.line_b_start is None:
        self.line_b_start = geometry_msgs.msg.Point32()
      if self.line_b_end is None:
        self.line_b_end = geometry_msgs.msg.Point32()
    else:
      self.line_a_start = geometry_msgs.msg.Point32()
      self.line_a_end = geometry_msgs.msg.Point32()
      self.line_b_start = geometry_msgs.msg.Point32()
      self.line_b_end = geometry_msgs.msg.Point32()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12f().pack(_x.line_a_start.x, _x.line_a_start.y, _x.line_a_start.z, _x.line_a_end.x, _x.line_a_end.y, _x.line_a_end.z, _x.line_b_start.x, _x.line_b_start.y, _x.line_b_start.z, _x.line_b_end.x, _x.line_b_end.y, _x.line_b_end.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.line_a_start is None:
        self.line_a_start = geometry_msgs.msg.Point32()
      if self.line_a_end is None:
        self.line_a_end = geometry_msgs.msg.Point32()
      if self.line_b_start is None:
        self.line_b_start = geometry_msgs.msg.Point32()
      if self.line_b_end is None:
        self.line_b_end = geometry_msgs.msg.Point32()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.line_a_start.x, _x.line_a_start.y, _x.line_a_start.z, _x.line_a_end.x, _x.line_a_end.y, _x.line_a_end.z, _x.line_b_start.x, _x.line_b_start.y, _x.line_b_start.z, _x.line_b_end.x, _x.line_b_end.y, _x.line_b_end.z,) = _get_struct_12f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12f().pack(_x.line_a_start.x, _x.line_a_start.y, _x.line_a_start.z, _x.line_a_end.x, _x.line_a_end.y, _x.line_a_end.z, _x.line_b_start.x, _x.line_b_start.y, _x.line_b_start.z, _x.line_b_end.x, _x.line_b_end.y, _x.line_b_end.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.line_a_start is None:
        self.line_a_start = geometry_msgs.msg.Point32()
      if self.line_a_end is None:
        self.line_a_end = geometry_msgs.msg.Point32()
      if self.line_b_start is None:
        self.line_b_start = geometry_msgs.msg.Point32()
      if self.line_b_end is None:
        self.line_b_end = geometry_msgs.msg.Point32()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.line_a_start.x, _x.line_a_start.y, _x.line_a_start.z, _x.line_a_end.x, _x.line_a_end.y, _x.line_a_end.z, _x.line_b_start.x, _x.line_b_start.y, _x.line_b_start.z, _x.line_b_end.x, _x.line_b_end.y, _x.line_b_end.z,) = _get_struct_12f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12f = None
def _get_struct_12f():
    global _struct_12f
    if _struct_12f is None:
        _struct_12f = struct.Struct("<12f")
    return _struct_12f
